import telebot
from telebot import types
from .requests_client import requests_client_interface
from . import settings
from . import small_redis_ORM

help_text = '''–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –µ–≥–æ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å /start
–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–∞—Ü–µ–ª–µ–Ω –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± —ç—Ç–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∏–∏ –±–æ—Ç–æ–º;
/menu - –º–µ–Ω—é –±–æ—Ç–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å.

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –≤ –º–µ–Ω—é:
1. –ú–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.
2. –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
3. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

–í —Å–ª—É—á–∞–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º, –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏.
–í —Å–ª—É—á–∞–µ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º, –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–∏–¥–µ–º–ª–µ–Ω–∏—è –æ–±–æ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º. 

–ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø–æ –ø–æ–≤–æ–¥—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –í—ã –º–æ–∂–µ—Ç–µ:
1. –ù–∞–∂–∞—Ç—å "–Ø –ø–æ–π–¥—É". –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–µ—Ç –≤–∞—Å –≤ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
2. –ù–∞–∂–∞—Ç—å "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏". –ë–æ—Ç –Ω–∞–ø–∏—à–µ—Ç –í–∞–º, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–¥–æ–π–¥—ë—Ç –∫ –Ω–∞—á–∞–ª—É.
3. –ù–∞–∂–∞—Ç—å "–Ø –Ω–µ –ø–æ–π–¥—É". –ë–æ—Ç —É–¥–∞–ª–∏—Ç –≤–∞—Å –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –Ω–∞—á–∞–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
'''

telebot_token = settings.telebot_token
# aiohttp_call = aiohttp_client_interface.aiohttp_call

bot = telebot.TeleBot(telebot_token)

@bot.message_handler(commands=['ping'])
def ping_pong(message):
    result = requests_client_interface.ping()
    result = str(result)
    bot.send_message(message.chat.id, result)

@bot.message_handler(commands=['start'])
def start(message):
    conf_id = str(message.chat.id)
    conf_options = '100'
    result = requests_client_interface.add_conf(conf_id=conf_id, conf_options=conf_options)['result']
    if result == 0:
        bot.send_message(message.chat.id, '–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏')
    elif result == 1:
        bot.send_message(message.chat.id, '''–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
/menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º''')


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['menu'])
def send_menu(message):
    chat_id = str(message.chat.id)
    chat_exist = requests_client_interface.check_conf_exist(chat_id)['result']
    if chat_exist == 0:
        bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ /start')
        return None
    
    bot_active_flag, event_cost_flag, filter_themes_flag = requests_client_interface.get_conf_options(chat_id)['conf_options']
    if bot_active_flag == '1':
        bot_active_text = 'üü¢ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω'
    else:
        bot_active_text = 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'
    
    if event_cost_flag == '1':
        event_cost_text = 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ\n   –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'
    else:
        event_cost_text = 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ\n   –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'

    if filter_themes_flag == '1':
        filter_themes_text = 'üü¢ –í–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º'
    else:
        filter_themes_text = 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º'

    message_text = '–ú–µ–Ω—é –±–æ—Ç–∞:'+'\n'+bot_active_text+'\n'+event_cost_text+'\n'+filter_themes_text

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –±–æ—Ç–∞",callback_data='bot_active_button'))
    keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",callback_data='event_cost_button'))
    keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º",callback_data='filter_themes_button'))
    if filter_themes_flag == '1':
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º—ã",callback_data='filter_themes_menu_button'))
    
    bot.send_message(message.chat.id, message_text, reply_markup=keyboard)


def send_event_info(chat_id, event_id):
    bot_active_flag, event_cost_flag, filter_themes_flag = requests_client_interface.get_conf_options(chat_id)['conf_options']
    if bot_active_flag == '0':
        bot.send_message(chat_id, '–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
        return None

    # print('bot activated')
    if requests_client_interface.check_event_exist(event_id)['result'] == 0:
        bot.send_message(chat_id, 'event_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return None

    # print('event exist')
    event_name = requests_client_interface.get_event_name(event_id)['event_name']
    event_descr = requests_client_interface.get_event_descr(event_id)['event_descr']
    event_date = requests_client_interface.get_event_date(event_id)['event_date']
    event_url = requests_client_interface.get_event_url(event_id)['event_url']
    event_theme = requests_client_interface.get_event_theme(event_id)

    if filter_themes_flag == '1':
        conf_themes = requests_client_interface.get_conf_themes(chat_id)
        theme_valid = True
        for conf_theme in conf_themes:
            if conf_theme in event_theme:
                theme_valid = False
        if theme_valid:
            return None

    # print('theme on')
    date_str, time_str = event_date.split(',')

    message_text = f"""–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_name}
–î–∞—Ç–∞: {date_str.replace('_','.')} –∏ –≤—Ä–µ–º—è {time_str.replace('_',':')}.
–û–ø–∏—Å–∞–Ω–∏–µ: {event_descr}
–°—Å—ã–ª–∫–∞: {event_url}
–¢–µ–≥–∏: {','.join(event_theme)}"""

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ",url=event_url))
    keyboard.add(types.InlineKeyboardButton(text="–Ø –ø–æ–π–¥—É",callback_data=f'user_go_event_button:{event_id}', pay='–°—Ç—Ä–æ–∫–∞'))
    keyboard.add(types.InlineKeyboardButton(text="–Ø –Ω–µ –ø–æ–π–¥—É",callback_data=f'user_doesnt_go_event_button:{event_id}'))
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",callback_data=f'remind_user_go_event_button:{event_id}'))
    bot.send_message(chat_id, message_text, reply_markup=keyboard)


def remind_user_about_event(user_id, event_id):
    # TODO –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    if requests_client_interface.check_event_exist(event_id)['result'] == 0:
        return None
    event_name = requests_client_interface.get_event_name(event_id)['event_name']
    event_url = requests_client_interface.get_event_url(event_id)['event_url']
    bot.send_message(user_id, f'–°–æ–±—ã—Ç–∏–µ "{event_name}" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n–°—Å—ã–ª–∫–∞: {event_url}')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # ------------------menu buttons------------------
    if call.data == 'bot_active_button':
        result_dict = requests_client_interface.change_option_bot_active_for_conf(call.message.chat.id)
        if result_dict['result']:
            if result_dict['new_opt'] == '1':
                bot.send_message(call.message.chat.id, 'üü¢ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω')
            else:
                bot.send_message(call.message.chat.id, 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
 
 
    elif call.data == 'event_cost_button':
        bot.answer_callback_query(callback_query_id=call.id, text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –Ω–µ–¥–æ–ø—É—Å—Ç—É–ø–Ω–∞.\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.')
        # result_dict = requests_client_interface.change_option_event_cost_for_conf(call.message.chat.id)
        # if result_dict['result']:
        #     if result_dict['new_opt'] == '1':
        #         bot.send_message(call.message.chat.id, 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        #     else:
        #         bot.send_message(call.message.chat.id, 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')

 
    elif call.data == 'filter_themes_button':
        result_dict = requests_client_interface.change_option_filter_themes_for_conf(call.message.chat.id)
        if result_dict['result']:
            if result_dict['new_opt'] == '1':
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º—ã",callback_data='filter_themes_menu_button'))

                bot.send_message(call.message.chat.id, 'üü¢ –í–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º', reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º')

    # --------------filter themes menu buttons--------------

    elif call.data == 'filter_themes_menu_button':
        all_themes_list = requests_client_interface.get_all_themes()
        conf_themes_list = requests_client_interface.get_conf_themes(call.message.chat.id)
        message_text_list = ['–ú–µ–Ω—é —Ç–µ–º:']
        print('conf_themes_list',conf_themes_list)
        for theme in all_themes_list:
            if theme in conf_themes_list:
                message_text_list.append(f'üü¢ {theme}')
            else:
                message_text_list.append(f'üî¥ {theme}')
        message_text = '\n'.join(message_text_list)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —Ç–µ–º—ã",callback_data='on_filter_themes_button'))
        keyboard.add(types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–º—ã",callback_data='off_filter_themes_button'))
        bot.send_message(call.message.chat.id, message_text, reply_markup=keyboard)

    # ------------add/remove theme for conf button------------

    elif call.data == 'on_filter_themes_button':
        all_themes_list = requests_client_interface.get_all_themes()
        conf_themes_list = requests_client_interface.get_conf_themes(call.message.chat.id)
        message_text = '–í–∫–ª—é—á–∏—Ç—å —Ç–µ–º—ã:'
        

        keyboard_not_empty = False
        keyboard = types.InlineKeyboardMarkup()
        for theme in all_themes_list:
            if theme not in conf_themes_list:
                keyboard.add(types.InlineKeyboardButton(text=f"{theme}",callback_data=f'add_theme_for_conf_button:{theme}'))
                keyboard_not_empty = True

        if keyboard_not_empty:
            bot.send_message(call.message.chat.id, message_text, reply_markup=keyboard)
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—Å–µ —Ç–µ–º—ã —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω—ã.')


    elif call.data == 'off_filter_themes_button':
        all_themes_list = requests_client_interface.get_all_themes()
        conf_themes_list = requests_client_interface.get_conf_themes(call.message.chat.id)
        message_text = '–í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–º—ã:'

        keyboard_not_empty = False
        keyboard = types.InlineKeyboardMarkup()
        for theme in all_themes_list:
            if theme in conf_themes_list:
                keyboard.add(types.InlineKeyboardButton(text=f"{theme}",callback_data=f'delete_theme_for_conf_button:{theme}'))
                keyboard_not_empty = True

        if keyboard_not_empty:        
            bot.send_message(call.message.chat.id, message_text, reply_markup=keyboard)
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—Å–µ —Ç–µ–º—ã —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω—ã.')


    elif call.data.startswith('add_theme_for_conf_button:'):
        theme = call.data.split(':')[1]

        result = requests_client_interface.set_themes_for_conf(call.message.chat.id, theme)['result']
        if result == "1":
            message_text = f'–¢–µ–º–∞ {theme} —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω–∞ üü¢'
            bot.send_message(call.message.chat.id, message_text)
        elif result == "0":
            bot.answer_callback_query(callback_query_id=call.id, text='–¢–µ–º–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')


    elif call.data.startswith('delete_theme_for_conf_button:'):
        theme = call.data.split(':')[1]

        result = requests_client_interface.del_themes_for_conf(call.message.chat.id, theme)['result']
        if result == "1":
            message_text = f'–¢–µ–º–∞ {theme} —Ç–µ–ø–µ—Ä—å –≤—ã–∫–ª—é—á–µ–Ω–∞ üî¥'
            bot.send_message(call.message.chat.id, message_text)
        elif result == "0":
            bot.answer_callback_query(callback_query_id=call.id, text='–¢–µ–º–∞ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')

    # --------------------event buttons--------------------

    elif call.data.startswith('user_go_event_button:'):
        event_id = call.data.split(':')[1]
        user_id = call.from_user.id
        result = requests_client_interface.set_user_for_event(event_id, user_id)['result']
        if result == 1:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        elif result == 0:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')

    elif call.data.startswith('user_doesnt_go_event_button:'):
        event_id = call.data.split(':')[1]
        user_id = call.from_user.id
        result = requests_client_interface.del_user_for_event(event_id, user_id)['result']
        if 1 in result:
            if small_redis_ORM.delete_shedule_messages_by_user_event(user_id, event_id,) == 1:
                bot.answer_callback_query(callback_query_id=call.id, text='–ó–∞–ø–∏—Å—å –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω—ã.')
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
        elif result == [0,0]:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')


    elif call.data.startswith('remind_user_go_event_button:'):
        event_id = call.data.split(':')[1]
        user_id = call.from_user.id
        result = requests_client_interface.set_user_remind_for_event(event_id, user_id)['result']
        if result == 1:
            date_time = requests_client_interface.get_event_date(event_id)['event_date']
            if small_redis_ORM.set_shedule_message(user_id, event_id, date_time) == 1:
                bot.answer_callback_query(callback_query_id=call.id, text='–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å.')
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
        elif result == 0:
            bot.answer_callback_query(callback_query_id=call.id, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—Ç–æ–∏—Ç.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
        



